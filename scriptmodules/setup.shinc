#!/bin/bash
#
# RetroRig setup modules
# This is a small script to copy over configuration files for emulators
# append a "-x" on the end above for debugging if need be
# Please report any errors via a pull request
# You can also reach me on twitter: @N3RD42
#

function rrs_prepareFolders()
{
	echo "Creating folders for ROMs, Artwork, Saves, and dotfiles"
	# We pass -p below,so all folders below are created for 
	# a given path

	pathlist=()

	# create autostart folder for manual desktop entries
	pathlist+=("$home/.config/autostart/")

	#emulator base directory
	#pathlist+=("$rootdir/emulators")

	#setup skelton folders for ROMs
	pathlist+=("$rootdir/ROMs/Atari 2600")
	pathlist+=("$rootdir/ROMs/Atari Lynx")
	pathlist+=("$rootdir/ROMs/Gamecube")
	pathlist+=("$rootdir/ROMs/MAME")
	pathlist+=("$rootdir/ROMs/mupen64plus")
	pathlist+=("$rootdir/ROMs/NES")
	pathlist+=("$rootdir/ROMs/SNES")
	pathlist+=("$rootdir/ROMs/Sega Master System")
	pathlist+=("$rootdir/ROMs/Sega Game Gear")
	pathlist+=("$rootdir/ROMs/Sega Genesis")
	pathlist+=("$rootdir/ROMs/Sega CD")
	pathlist+=("$rootdir/ROMs/Sega 32X")
	pathlist+=("$rootdir/ROMs/GB")
	pathlist+=("$rootdir/ROMs/GBC")
	pathlist+=("$rootdir/ROMs/GBA")
	pathlist+=("$rootdir/ROMs/TurboGraphx 16")
	pathlist+=("$rootdir/ROMs/Neo Geo/CDZ")
	pathlist+=("$rootdir/ROMs/Neo Geo/AES")
	pathlist+=("$rootdir/ROMs/PSP")
	pathlist+=("$rootdir/ROMs/PS1")
	pathlist+=("$rootdir/ROMs/PS2")
	pathlist+=("$rootdir/ROMs/Wii")

	#Artwork 
	pathlist+=("$rootdir/Artwork/Atari 2600")
	pathlist+=("$rootdir/Artwork/Atari Lynx")
	pathlist+=("$rootdir/Artwork/Gamecube")
	pathlist+=("$rootdir/Artwork/Nintendo 64")
	pathlist+=("$rootdir/Artwork/NES")
	pathlist+=("$rootdir/Artwork/SNES")
	pathlist+=("$rootdir/Artwork/Sega Master System")
	pathlist+=("$rootdir/Artwork/Sega Game Gear")
	pathlist+=("$rootdir/Artwork/Sega Genesis")
	pathlist+=("$rootdir/Artwork/Sega CD")
	pathlist+=("$rootdir/Artwork/Sega 32X")
	pathlist+=("$rootdir/Artwork/GB")
	pathlist+=("$rootdir/Artwork/GBC")
	pathlist+=("$rootdir/Artwork/GBA")
	pathlist+=("$rootdir/Artwork/TurboGraphx 16")
	pathlist+=("$rootdir/Artwork/Neo Geo/CDZ")
	pathlist+=("$rootdir/Artwork/Neo Geo/AES")
	pathlist+=("$rootdir/Artwork/PSP")
	pathlist+=("$rootdir/Artwork/PS1")
	pathlist+=("$rootdir/Artwork/PS2")
	pathlist+=("$rootdir/Artwork/Wii")

	#Artwork - MAME offline scraper
	pathlist+=("$rootdir/Artwork/MAME")
	pathlist+=("$rootdir/Artwork/MAME/boxfront")
	pathlist+=("$rootdir/Artwork/MAME/RCB")
	pathlist+=("$rootdir/Artwork/MAME/cabinet")
	pathlist+=("$rootdir/Artwork/MAME/marquee")
	pathlist+=("$rootdir/Artwork/MAME/action")
	pathlist+=("$rootdir/Artwork/MAME/title")
	pathlist+=("$rootdir/Artwork/MAME/gameplay")

	#Saves (if any)
	pathlist+=("$rootdir/Saves/Atari 2600")
	pathlist+=("$rootdir/Saves/Atari Lynx")
	pathlist+=("$rootdir/Saves/MAME")
	pathlist+=("$rootdir/Saves/dolphin-emu/GC")
	pathlist+=("$rootdir/Saves/dolphin-emu/Wii")
	pathlist+=("$rootdir/Saves/mupen64plus")
	pathlist+=("$rootdir/Saves/mednafen")
	pathlist+=("$rootdir/Saves/GensGS")
	pathlist+=("$rootdir/Saves/GB")
	pathlist+=("$rootdir/Saves/GBC")
	pathlist+=("$rootdir/Saves/GBA")
	pathlist+=("$rootdir/Saves/TurboGraphx 16")
	pathlist+=("$rootdir/Saves/Neo Geo/CDZ")
	pathlist+=("$rootdir/Saves/Neo Geo/AES")
	pathlist+=("$rootdir/Saves/ppsspp")
	pathlist+=("$rootdir/Saves/pcsx2")

	# create dotfiles
	pathlist+=("$config_home")
	pathlist+=("$config_home/.qjoypad3")
	pathlist+=("$config_home/.config/antimicro")
	pathlist+=("$config_home/.dolphin-emu/GC/Config")
	pathlist+=("$config_home/.dolphin-emu/Wii/Config")
	pathlist+=("$config_home/.config/mupen64plus")
	pathlist+=("$config_home/.config/ppsspp/PSP/SYSTEM")
	pathlist+=("$config_home/.mame/cfg")
	pathlist+=("$config_home/.mess")
	pathlist+=("$config_home/.gens")
	pathlist+=("$config_home/.config/pcsx2/inis")
	pathlist+=("$config_home/.config/pcsx2/memcards")
	pathlist+=("$config_home/.mess/cfg")
	pathlist+=("$config_home/.stella")
	pathlist+=("$config_home/.mednafen")
	pathlist+=("$config_home/.local/share/Steam/config")

	# emulationstation folders
	pathlist+=("$config_home/.emulationstation")
	pathlist+=("$config_home/.emulationstation/themes")

	#BIOS folder(s)
	pathlist+=("$rootdir/BIOS/MESS")
	pathlist+=("$rootdir/BIOS/MAME")
	pathlist+=("$rootdir/BIOS/Gens")
	# Note: PS1 BIOS path is set in mednafen under:
	# filesys.path_firmware
	pathlist+=("$rootdir/BIOS/Mednafen")
	pathlist+=("$rootdir/BIOS/PCSX2")

	# folder for savestates 
	# Moved if statements below to backup folders

	#Configs (not needed at the moment)
	# pathlist+=("$rootdir/Configs")

	# quotes needed on entry to preven globbing on directory creation!
	# Expanding arrays involves [@] and {}
	for entry in "${pathlist[@]}"
	do
		if [[ ! -d "$entry" ]]; then
			mkdir -p "$entry" 
			chown "$user" "$entry"
			chgrp "$user" "$entry"
		fi
	done

	# correct permissions
	h_correct_perms

	#backup existing state saves, if a backup folder does not exist, and the save state folder a real directory is
	if [ ! -d "$config_home/.dolphin-emu/StateSaves.old" ]; then
		if [ ! -L "$config_home/.dolphin-emu/StateSaves" ]; then
			if [ -d "$config_home/.dolphin-emu/GC/StateSaves" ] || [ -d "$config_home/.dolphin-emu/Wii/StateSaves" ]; then
				mv -f "$config_home/.dolphin-emu/GC/StateSaves" "$config_home/.dolphin-emu/GC/StateSaves.old"
				mv -f "$config_home/.dolphin-emu/Wii/StateSaves" "$config_home/.dolphin-emu/Wii/StateSaves.old"
				dolphin_backup=true
			fi
		fi
	fi

	if [ ! -d "$config_home/.config/mupen64plus/save.old" ]; then
		if [ ! -L "$config_home/.config/mupen64plus/save" ]; then
			if [ -d "$config_home/.config/mupen64plus/save" ]; then
				mv -f "$config_home/.config/mupen64plus/save" "$config_home/.config/mupen64plus/save.old"
				mupen64plus_backup=true
			fi
		fi
	fi

	if [ ! -d "$config_home/.mednafen/sav.old" ]; then
		if [ ! -L "$config_home/.mednafen/sav" ]; then
			if [ -d "$config_home/.mednafen/sav" ]; then
				mv -f "$config_home/.mednafen/sav" "$config_home/.mednafen/sav.old"
				mednafen_backup=true
			fi
		fi
	fi

	if [ ! -d "$config_home/.gens/StateSaves.old" ]; then
		if [ ! -L "$config_home/.gens/StateSaves" ]; then
			if [ -d "$config_home/.gens/StateSaves" ]; then
				mv -f "$config_home/.gens/StateSaves" "$config_home/.gens/StateSaves.old"
				gens_backup=true
			fi
		fi
	fi

	if [ ! -d "$config_home/.config/ppsspp/PSP/SAVEDATA.old" ]; then
		if [ ! -L "$config_home/.config/ppsspp/PSP/SAVEDATA" ]; then
			if [ -d "$config_home/.config/ppsspp/PSP/SAVEDATA" ]; then
				mv -f "$config_home/.config/ppsspp/PSP/SAVEDATA" "$config_home/.config/ppsspp/PSP/SAVEDATA.old"
				ppsspp_backup=true
			fi
		fi
	fi

	if [ ! -d "$config_home/.config/pcsx2/sstates.old" ]; then
		if [ ! -L "$config_home/.config/pcsx2/sstates" ]; then
			if [ -d "$config_home/.config/pcsx2/sstates" ]; then
				mv -f "$config_home/.config/pcsx2/sstates" "$config_home/.config/pcsx2/sstates.old"
				pcsx2_backup=true
			fi
		fi
	fi

	#remove old links
	rm -f "$config_home/.dolphin-emu/StateSaves"
	rm -f "$config_home/.dolphin-emu/GC/StateSaves"
	rm -f "$config_home/.dolphin-emu/Wii/StateSaves"
	rm -f "$config_home/.config/mupen64plus/save"
	rm -f "$config_home/.mednafen/sav"
	rm -f "$config_home/.gens/StateSaves"
	rm -f "$config_home/.config/ppsspp/PSP/SAVEDATA"
	rm -f "$config_home/.config/pcsx2/sstates"

	#create links 
	ln -sf "$rootdir/Saves/dolphin-emu/GC" "$config_home/.dolphin-emu/GC/StateSaves"
	ln -sf "$rootdir/Saves/dolphin-emu/Wii" "$config_home/.dolphin-emu/Wii/StateSaves"
	ln -sf "$rootdir/Saves/mupen64plus" "$config_home/.config/mupen64plus/save"
	ln -sf "$rootdir/Saves/mednafen" "$config_home/.mednafen/sav"
	ln -sf "$rootdir/Saves/GensGS" "$config_home/.gens/StateSaves"
	ln -sf "$rootdir/Saves/ppsspp" "$config_home/.config/ppsspp/PSP/SAVEDATA"
	ln -sf "$rootdir/Saves/pcsx2" "$config_home/.config/pcsx2/sstates"

	#restore backup
	if [ "$dolphin_backup" == "true" ]; then
		# Place legacy save folder in its own area, as to not confuse the new directory split
		cp -rf "$config_home/.dolphin-emu/StateSaves.old/*" "$config_home/.dolphin-emu/legacy/StateSaves"
		# Restore split directory save files
		cp -rf "$config_home/.dolphin-emu/GC/StateSaves.old/*" "$config_home/.dolphin-emu/GC/StateSaves"
		cp -rf "$config_home/.dolphin-emu/Wii/StateSaves.old/*" "$config_home/.dolphin-emu/Wii/StateSaves"
	fi

	if [ "$mupen64plus_backup" == "true" ]; then
		cp -rf "$config_home/.config/mupen64plus/StateSaves.old/*" "$config_home/.config/mupen64plus/StateSaves"
	fi

	if [ "$mednafen_backup" == "true" ]; then
		cp -rf "$config_home/.mednafen/sav.old/*" "$config_home/.mednafen/sav"
	fi

	if [ "$gens_backup" == "true" ]; then
		cp -rf "$config_home/.gens/StateSaves.old/*" "$config_home/.gens/StateSaves"
	fi

	if [ "$ppsspp_backup" == "true" ]; then
		cp -rf "$config_home/.config/ppsspp/PSP/SAVEDATA.old/*" "$config_home/.config/ppsspp/PSP/SAVEDATA"
	fi

	if [ "$pcsx2_backup" == "true" ]; then
		cp -rf "$config_home/.config/pcsx2/sstates.old/*" "$config_home/.config/pcsx2/sstates"
	fi

	# correct permissions
	h_correct_perms

}

function rrs_gamepad ()
{

# some residual chown/chmod text shows up at times, clear
clear

cmd=(dialog --backtitle "LibreGeek.org RetroRig-ES Installer" --menu "| Gamepad Select | \
			 Request any new Gamepads via github!" 16 62 16)
options=(1 "Xbox 360 Controller (wireless)"
	 2 "Xbox 360 Controller (USB)"
	 3 "Sony PS3 Sixaxis (Bluetooth)"
	 4 "Sony PS3 Sixaxis (USB)"
	 5 "Exit gamepad selection")

	#make menu choice
	selection=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
	#functions

	for choice in $selection
	do
		case $choice in

		1)
		gp_common
		gp_x360_wireless
		h_restore_bios_cfg
		# set type for steam setup and set controls
		STEAM_GP_TYPE="x360wireless"
		gp_steam_control	
		;;

		2)
		gp_common
		gp_x360_usb
		h_restore_bios_cfg
		# set type for steam setup and set controls
		STEAM_GP_TYPE="x360usb"
		gp_steam_control
		;;

		3)
		gp_common
		gp_ps3_blu
		h_restore_bios_cfg
		# set type for steam setup and set controls
		STEAM_GP_TYPE="ps3blu"
		gp_steam_control
		;;

		4)
		gp_common
		gp_ps3_usb
		h_restore_bios_cfg
		# set type for steam setup and set controls
		STEAM_GP_TYPE="ps3usb"
		gp_steam_control
		;;

		5)
		return
		;;

		esac
	done
	
	wii_motion_controller_for_dolphin
	enable_gp_autostart
	enable_rr_autostart
	
}


function rrs_post_install()
{

	# Based on the type of type Desktop Environment
	# This function targets DE-specific areas for screensavers,
	# power functions, shortcuts and more.

	# $XDG_CURRENT_DESKTOP will tell you what DE you are using.
	rrDE=$XDG_CURRENT_DESKTOP

	case $rrDE in
		Unity)

			# Disable screensaver, EmulationStation will manage this
			# Export display to allow gsettings running in terminal window
			export DISPLAY=:0.0
			gsettings set org.gnome.desktop.screensaver lock-enabled false
			gsettings set org.gnome.desktop.screensaver ubuntu-lock-on-suspend false
			gsettings set org.gnome.desktop.session idle-delay 3600

			# Create Unity launcher icon from existing /usr/share/applications/RetroRig-ES.desktop
			# This only applies to Unity desktop users.
			gsettings set com.canonical.Unity.Launcher favorites "$(gsettings get com.canonical.Unity.Launcher favorites | sed "s/, *'RetroRig-ES.desktop' *//g" | sed "s/'RetroRig-ES.desktop' *, *//g" | sed -e "s/]$/, 'RetroRig-ES.desktop'")"
			;;

		Gnome)
			# Nothing to see here yet
			;;

		Cinnamon)
			# Nothing to see here yet
			;;			

		*)
		;;
	esac

}

function rrs_discover_distro()
{

	# Users that may run this on a non-Linux OS:
	UNAME=`uname`
	if [ "$UNAME" != "Linux" ]; then
	   echo "Error: Unsupported Operating System"
	   exit 1
	fi

	# OS Distro
	OS_ID_STRING=$(lsb_release -a 2>/dev/null|grep "Distributor ID")
	OS_TYPE=$(echo $OS_ID_STRING|cut -f 3 -d ' ')

	# Release
	OS_RELEASE_STRING=$(lsb_release -a 2>/dev/null|grep "Release")
	OS_RELEASE=$(echo $OS_RELEASE_STRING | sed s/' '//g | cut -f 2 -d ':')

	# Arch
	case $(uname -m) in
	*64)
		echo "64-bit"
		;;
	*)
		echo "32-bit"
		;;
	esac

}

function rrs_source_syscalls()
{
	# Source the correct syscalls for platform
	# This largely alludes to the default package manager
	echo "Setting syscalls based on default package manager..."
	
	case $OS_TYPE in
		Ubuntu)

			case $OS_RELEASE in

				14.04)
					source "$scriptdir/scriptmodules/syscalls-deb.shinc"
					platform_check="Yes"
					pkg_manager="apt/aptitude"
					init_system="upstart"
					;;

				14.10)
					source "$scriptdir/scriptmodules/syscalls-deb.shinc"
					platform_check="Yes"
					pkg_manager="apt/aptitude"
					init_system="upstart"
					;;

				*)

					# This does not exit the script at this time, but will once 
					# All proper support distros that work are identifed.
					platform_check="No"
					pkg_manager="N/A"
					init_system="N/A"
					#clear
					#exit
					;;
			esac
			;;

		LinuxMint)

			case $OS_RELEASE in

				17)
					source "$scriptdir/scriptmodules/syscalls-deb.shinc"
					platform_check="Yes"
					pkg_manager="apt/aptitude"
					init_system="upstart"
					;;


				*)

					# This does not exit the script at this time, but will once 
					# All proper support distros that work are identifed.
					platform_check="No"
					pkg_manager="N/A"
					init_system="N/A"
					#clear
					#exit
					;;
			esac

			;;

		Deepin)

			case $OS_RELEASE in

				2014)
					source "$scriptdir/scriptmodules/syscalls-deb.shinc"
					platform_check="Yes"
					pkg_manager="apt/aptitude"
					init_system="upstart"
					;;


				*)

					# This does not exit the script at this time, but will once 
					# All proper support distros that work are identifed.
					platform_check="No"
					pkg_manager="N/A"
					init_system="N/A"
					#clear
					#exit
					;;
			esac

			;;

		*)
			# This does not exit the script at this time, but will once 
			# All proper support distros that work are identifed.
			platform_check="No"
			pkg_manager="N/A"
			init_system="N/A"
			#clear
			#exit
		;;

	esac
	# Display system information
	echo "Supported Platform? $platform_check"
	echo "Distro: $OS_TYPE"
	echo "Release: $OS_RELEASE"
	echo "Default init system: $init_system"
	echo "Primary package management system: $pkg_manager"
	echo "#####################################################"
	sleep 4s

}

function rrs_add_standard_repos()
{
	########################################################
	# install package repositories and missing libraries
	########################################################

	case $OS_TYPE in
		"Ubuntu")
			#find version of operating system


			###############################################################
			# Add our standport Debian repositories for various pkgs
			###############################################################
			# add respository for RetroRig backends (dolphin, mednafen,...)
			$cmd_add_repo ppa:beauman/retrorig
			# Add repository for additional pkgs (retrorig-setup, joydetect)
			$cmd_add_repo ppa:mdeguzis/retrorig

			case $OS_RELEASE in

				14.04)

					echo "running Ubuntu 14.04 LTS"
					;;

				14.10)

					echo "running Ubuntu 14.10"

					#add beauman's trusty repository 
					echo "deb http://ppa.launchpad.net/beauman/retrorig/ubuntu trusty main" >\
					  /etc/apt/sources.list.d/beauman-ubuntu-retrorig-trusty.list

					echo "copying missing libraries for Ubuntu 14.10"
					mkdir -p /usr/share/RetroRig
					cd /usr/share/RetroRig
					wget --tries=50 -P /tmp "http://www.libregeek.org/RetroRig/libs/libs.Ubuntu.14.10.tar.bz"
					tar xvfj /tmp/libs.Ubuntu.14.10.tar.bz

					echo "installing libraries system wide"
					cd /etc/ld.so.conf.d/
					echo /usr/share/RetroRig > RetroRig.conf
					ldconfig
				
#					TODO
#					DEINSTALLATION CODE
#
#					# remove PPA
#					rm -f /etc/apt/sources.list.d/beauman-ubuntu-retrorig-trusty.list*
#					rm -f /etc/apt/sources.list.d/beauman-ubuntu-retrorig-testing-trusty.list*
#					apt-get update
#
#					# remove supplemental libraries
#					rm -rf /usr/share/RetroRig
#					rm /etc/ld.so.conf.d/RetroRig.conf
#					ldconfig
					;;

				*)
					;;
			esac
		;;

		LinuxMint)

			###############################################################
			# Add our standport Debian repositories for various pkgs
			###############################################################
			# add respository for RetroRig backends (dolphin, mednafen,...)
			$cmd_add_repo ppa:beauman/retrorig
			# Add repository for additional pkgs (retrorig-setup, joydetect)
			$cmd_add_repo ppa:mdeguzis/retrorig

			case $OS_RELEASE in
				"17")
					echo "running Linux Mint 17 Qiana"
					
						# latest X11 drivers
						$cmd_add_repo ppa:xorg-edgers/ppa
					;;

				*)
					;;
			esac
		;;
		Deepin)

			###############################################################
			# Add our standport Debian repositories for various pkgs
			###############################################################
			# add respository for RetroRig backends (dolphin, mednafen,...)
			$cmd_add_repo ppa:beauman/retrorig
			# Add repository for additional pkgs (retrorig-setup, joydetect)
			$cmd_add_repo ppa:mdeguzis/retrorig

			case $OS_RELEASE in
				"2014")
					echo "running Deepin 2014"
					;;

				*)
					;;
			esac
		;;

		*)
			;;
	esac
}

function rrs_emulators()
{
	__postMSGs=""

	clear
	echo "Binaries-based installation"

	# install emulators
	em_install_mupen64plus 
	em_install_mame
	em_install_mess
	em_install_stella
	em_install_mednafen
	em_install_ppsspp
	em_install_dolphin
	em_install_pcsx2
	em_install_gens

	#fix permissions since we are running as sudo
	h_correct_perms

	__postMSGs="$__postMSGs This current configuration requires BIOS files be placed under '$rootdir/BIOS/' folder for the respective system you are using or under the '$rootdir/ROMs/' folder for the same system. You may also use the BIOS Loader under the settings menu. Many MAME games under MAME4ALL have self contained BIOS files."

	# inject a space to seperate messages?
	__postMSGs="$__postMSGs "

	__postMSGs="$__postMSGs\n\nIf you wish to have artwork for the MAME games, please visit the RCB main page at http://bit.ly/1lHHSIe and follow the 'Get artwork from emumovies' section'. The size is much too large to contain in RetroRig or Github. This may change."


	if [[ ! -z $__postMSGs ]]; then
	dialog --backtitle "LibreGeek.org - RetroRig Setup. Installation folder: $rootdir" --msgbox "$__postMSGs" 17 70
	fi

	dialog --backtitle "LibreGeek.org - RetroRig Setup. Installation folder: $rootdir" --msgbox "Finished emulator installs.\n\nYou now have to copy roms to the roms folders. You may also use the 'ROM loader' in settings menu" 17 60

}

function rrs_software() 
{

	# clear post install messages
	__postMSGs=""
	clear

	echo "Binaries-based installation"

	# add multi-arch support
	$cmd_add_32bit_arch

	# add add repos and 
	rrs_add_standard_repos

	# add extra repostories to the em_add_repos function!
	em_add_repos

	# update system pkgs currently installed first
	h_upgrade_system

	# install software from repositories
	# install binaries
	$cmd_install_pkg xboxdrv curl python-software-properties \
	pkg-config software-properties-common dconf-tools jstest-gtk \
	sixad libusb-0.1-4 antimicro bluez getpos unclutter \
	joydetect sudo ttf-dejavu-core ttf-dejavu-core ttf-liberation \
	wmctrl gdebi dos2unix

	# install emulationstation and its dependencies
	# gdebi -n emulationstation.deb could be used instead to gather these automatically
	$cmd_install_pkg libasound2 libboost-filesystem1.54.0 libboost-system1.54.0 libc6 libfreeimage3 libfreetype6 libgcc1 libgl1-mesa-glx libgl1 libsdl2-2.0-0 libstdc++6
	wget --tries=50 -P /tmp "http://www.emulationstation.org/downloads/releases/emulationstation_amd64_latest.deb"
	cd /tmp
	$cmd_manual_pkg_install /tmp/emulationstation_amd64_latest.deb
	
	#wii motion support
	$cmd_install_pkg libcwiid1 lswm wmgui wminput

	# call RetroRig's custom deb install for ps3 hotplugging. 
	# Thankfully our package still works with the Xbox 360 implementation,
	# so it is now part of the standard install set
	rrs_es_extras

	# Disable apport, as bug apport-gtk does nothing but interrupt
	# User can always enable this again
	sed -i "s|enabled=1|enabled=0|g" "/etc/default/apport"

	#fix permissions since we are running as sudo
	h_correct_perms

	# Inform user about post-install tasks
	# Output postMSGs to screen

	# inject a space to seperate messages?
	__postMSGs="$__postMSGs For VirtualBox users, please see the wiki under 'Installation' for notes on running RetroRig under a virtual machine! At the minimum, you will need to add a filter for your controller "

	if [[ ! -z $__postMSGs ]]; then
		dialog --backtitle "LibreGeek.org - RetroRig-ES Setup. Installation folder: $rootdir" --msgbox "$__postMSGs\n\nSoftware install complete. See debug.log for more details. Continuing on to emulator installs..." 18 60
	fi

}

function rrs_debug()
{
	clear
	echo "Generating debug log"

	# Check for existance of essential files
	echo "Essential files: EmulationStation:" > "$rootdir/logs/debug.log"
	echo "Path(s): '$es_home'" >> "$rootdir/logs/debug.log"
	h_filechecker "$es_home" "$rootdir/logs/debug.log"

	# applications
	h_filechecker "/usr/share/applications/RetroRig-ES.desktop"
	h_filechecker "/usr/share/applications/startRetroES.sh"
	h_filechecker "/usr/share/applications/gp_autodetect.sh"
	h_filechecker "$xdg_desktop_dir/RetroRig-ES.desktop"
	h_filechecker "$xdg_pictures_dir/retro-icon.png"

	# autostart entries
	h_filechecker "$home/.config/autostart/RetroRig-ES.desktop"
	#h_filechecker "$home/.config/autostart/qjoypad.desktop"

	# init file checks	
	echo "Available init files:" >> "$rootdir/logs/debug.log"
	echo "Has xboxdrv been loaded?" >> "$rootdir/logs/debug.log"
	h_filechecker "/etc/init.d/xboxdrv"
	h_filechecker "/etc/default/xboxdrv"

	# Check unity settings:
	echo "Unity settings (if applicable):" >> "$rootdir/logs/debug.log"
	gsettings list-recursively "org.gnome.desktop.screensaver" | grep "lock-enabled" >> "$rootdir/logs/debug.log"
	gsettings list-recursively "org.gnome.desktop.screensaver" | grep "ubuntu-lock-on-suspend" >> "$rootdir/logs/debug.log"	
	gsettings list-recursively "org.gnome.desktop.session" | grep "idle-delay" >> "$rootdir/logs/debug.log"

	# pkg checks
	echo -e "\nChecking for needed pkgs installed: " >> "$rootdir/logs/debug.log"
	h_pkgcheck "stella"
	h_pkgcheck "mednafen"
	h_pkgcheck "mess"
	h_pkgcheck "mame"
	h_pkgcheck "ppsspp"
	h_pkgcheck "dolphin-emu"
	h_pkgcheck "mupen64plus"
	h_pkgcheck "pcsx2"
	h_pkgcheck "gens"
	
	h_pkgcheck "python-software-properties"
	h_pkgcheck "emulationstation"
	h_pkgcheck "dconf-tools"
	h_pkgcheck "xboxdrv"
	h_pkgcheck "curl"
	h_pkgcheck "getpos"
	h_pkgcheck "jstest-gtk"
	h_pkgcheck "antimicro"
	h_pkgcheck "dolphin-emu"
	h_pkgcheck "gens"
	h_pkgcheck "pcsx2"
	h_pkgcheck "ppsspp"
	h_pkgcheck "dos2unix"

	echo -e "\nEnd of log file" >> "$rootdir/logs/debug.log" >> "$rootdir/logs/debug.log"

	dialog --backtitle "LibreGeek.org - RetroRig-ES Setup. Installation folder: $rootdir" --msgbox "Debug log was generated in $rootdir/logs/debug.log. Additional logs can be found in the folder $rootdir/logs/." 10 60 

	#corect permissions
	h_correct_perms
}

function rrs_es_setup()
{

	clear
	# release the aptitdue hold to install/upgrade RetroRig's ES version
	#$cmd_unhold_pkg emulationstation

	# Custom script for reboots/hotplugging
	if [ -f "$scriptdir/es-cfgs/extra/gp_autodetect.sh" ]; then
		cp -v "$scriptdir/es-cfgs/extra/gp_autodetect.sh" "/usr/share/applications/"
	fi

	if [ -f "$scriptdir/es-cfgs/extra/RetroRig-ES.desktop" ]; then
		cp -v "$scriptdir/es-cfgs/extra/RetroRig-ES.desktop" "/usr/share/applications/"
	fi

	if [ -f "$scriptdir/es-cfgs/extra/RetroRig-ES.desktop" ]; then
		cp -v "$scriptdir/es-cfgs/extra/RetroRig-ES.desktop" "$xdg_desktop_dir"
	fi

	if [ -f "$scriptdir/es-cfgs/extra/retro-icon.png" ]; then
		cp -v "$scriptdir/es-cfgs/extra/retro-icon.png" "/usr/share/icons/"
	fi

	if [ -f "$scriptdir/es-cfgs/extra/startRetroES.sh" ]; then
		cp -v "$scriptdir/es-cfgs/extra/startRetroES.sh" "/usr/share/applications/"
	fi

	# insert restarting xboxdrv specifically into /etc/sudoers
	cat "$scriptdir/es-cfgs/extra/sudoers.txt" >> "/etc/sudoers"

	# copy in default files
	# es_input.cfg will be handled in the gamepads.shinc module
	cp -v "$scriptdir/es-cfgs/es_systems.cfg" "$es_home"
	cp -v "$scriptdir/es-cfgs/es_settings.cfg" "$es_home"
	
	# correct paths to RetroRig-ES root dir
	sed -i "s|rootdir_temp|$rootdir|g" "$es_home/es_systems.cfg"
	sed -i "s|rootdir_temp|$rootdir|g" "$es_home/es_settings.cfg"

	# fix their permissions
	chmod 755 "/usr/share/applications/gp_autodetect.sh" 
	chmod 755 "/usr/share/applications/RetroRig-ES.desktop"
	chmod 755 "/usr/share/applications/startRetroES.sh" 

	# insert SHA1 tag to rescan by replacing the placeholder
	#
	# THIS WILL NEED ADJUSTED FOR RETRORIG-ES Hotplugging!
	#
	if [ -f "$scriptdir/es-cfgs/extra/rescan" ]; then
		cp -v "$scriptdir/es-cfgs/extra/rescan" "/etc/init.d/rescan"
	fi

	sed -i "s/placeholderSHA1/$sha1/" "/etc/init.d/rescan"

	# Correct permissions on rescan service
	chmod 755 "/etc/init.d/rescan"  

	# Link the startRetroES.sh startup script to /usr/bin, so users can call "retrorig" at will
	ln -sf "/usr/share/applications/startRetroES.sh" "/usr/bin/retrorig-es"

	# update init scripts
	$update_init_rescan

	# start service
	$cmd_rescan_start

	#corect permissions
	h_correct_perms

}

function rrs_retrorig_cfgs()
{
	cp -Rv "$scriptdir/retrorig-cfgs/retrorig.cfg" "$configFile"

	ln -sf "$scriptdir/scripts" "$config_home/scripts"
	chown "$user" "$config_home/scripts"
	chgrp "$user" "$config_home/scripts"
}

function rrs_es_cfgs()
{
	clear
	
	# ES configs will go here. Include sed operations for temp replacements
	
}

function rrs_done()
{

	# The 3.14 manual kernel upgrade for Ubuntu systems is no longer necessary
	# This is confirmed to be fixed since linux: 3.13.0-38.65
	# Confirmed to be fine in current 3.13.0-37-generic.
	# Please see commit efeb2bd for legacy code. This message will be 
	# Removed in due time.

       	dialog --backtitle "LibreGeek.org - RetroRig-ES Setup. Installation folder: $rootdir" --msgbox "Finished main install tasks.\n\nYou now have to copy roms to the roms folders. \nThis can be done via SSH, Samba, or via your graphic folder manager (please see settings menu for more)\n\nAll current config folders used were appended with .old for restoration purposes.\n" 18 60

	# correct permissions
	h_correct_perms
}

function rrs_showHelp()
{
    #set color for highlights
    # Arch Linux wiki color listing: http://bit.ly/1nhkU8Y
    PATHCOLOR="36m"  #Cyan text
    TITLECOLOR="33m"  #Yellow text
    BARCOLOR="35m"  #Yellow text
    #Console help file
    clear
    echo ""
    echo -e "\e[0"$BARCOLOR$"============================================================\e[0m"
    echo -e "\e[0"$TITLECOLOR$"RetroRig-ES Help File\e[0m"
    echo -e "\e[0"$BARCOLOR$"============================================================\e[0m"
    echo ""
    echo "This script installs several tools and emulators as backends, and EmulationStation as the graphical front end. Because it needs to install some APT packages it has to be run with root priviliges."

    echo ""
    echo "When using..."
    echo "sudo ./retrorig-es-setup.sh
The installation directory is:"
echo -e "\e[0$PATHCOLOR$es_home/RetroRig-ES for the current user\e[0m"

    echo ""
    echo "When using..."
    echo "sudo ./retrorig-es-setup.sh USERNAME
The installation directory is:"
echo -e "\e[0$PATHCOLOR/$es_home/USERNAME/RetroRig-ES for user USERNAME\e[0m"

    echo ""
    echo "When using..."
    echo "sudo ./retrorig_setup.sh USERNAME ABSPATH
The installation directory is:"
echo -e "\e[0"$PATHCOLOR"ABSPATH for user USERNAME\e[0m"
    echo ""
    echo "Please submit all issues to GitHub: bit.ly/1ocT0we"
    
    echo -e "\e[0"$BARCOLOR$"============================================================\e[0m"
    echo "End Help File"
    echo -e "\e[0"$BARCOLOR$"============================================================\e[0m"
    echo ""
}

function rrs_prereq()
{
	if [[ -z $(type -P git) || -z $(type -P dialog) || -z $(type -P figlet) ]]; then
		echo ""
		echo "######################################"
		echo "Pre-req checks"	
		echo "######################################"
		echo "Did not find 1 or more of the packages: git, dialog, or figlet"
		echo "Attempting to install these now."
		echo ""
		sleep 3s
		# Update system first
		$cmd_update_system
		# fetch needed pkgs
		$cmd_install_pkg git dialog figlet
		if [ $? == '0' ]; then
			echo "Successfully installed 'git/dialog/figlet'." > "$rootdir/logs/prechecks.log"
			sleep 3s
			prereqs="true"
		else
			echo "Could not install 'git' and/or 'dialog/figlet'. Exiting..." > "$rootdir/logs/prechecks.log"
			prereqs="false"
			sleep 3s
			exit 1
		fi
	else
		echo "Found packages 'git/dialog/figlet'." > "$rootdir/logs/prechecks.log"
		prereqs="true"
		sleep 2s
	fi


echo "Current install user: $SUDO_USER" >> "$rootdir/logs/prechecks.log"
echo "Current install rootdir is: $rootdir" >>"$rootdir/logs/prechecks.log"
echo "Current script dir is:  $rootdir" >>"$rootdir/logs/prechecks.log"

if [ "$prereqs" == "true" ]; then
	echo "Pre-checks were sucessful!!!" >> "$rootdir/logs/prechecks.log"
else
	echo "Pre-checks were NOT sucessful. Sad crab!" >> "$rootdir/logs/prechecks.log"
fi

chown -R "$user" "$rootdir/logs/prechecks.log"
chgrp -R "$user" "$rootdir/logs/prechecks.log"

}

function rrs_reboot()
{

	#confirm reboot is the intended action
	dialog --title "Confirm yes/no" \
	--backtitle "LibreGeek.org RetroRig-ES Installer" \
	--yesno "Are you sure you want to reboot?"  6 0

	# Get exit status
	# 0 means user hit [yes] button.
	# 1 means user hit [no] button.
	# 255 means user hit [Esc] key.
	response=$?
	case $response in
		0)
		clear
		$cmd_reboot
		;;

		1)
		return 
		;;

		255)
		return
		;;
	esac
}
